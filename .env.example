# Tax AI Incubator Environment Configuration
# Copy this file to .env and fill in your actual values

# =============================================================================
# OpenAI Configuration (Required for Invoice Completion)
# =============================================================================
# Get your API key from: https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-proj-your-openai-api-key-here

# OpenAI Model Configuration (Optional)
OPENAI_MODEL=gpt-4
OPENAI_TEMPERATURE=0.1

# Invoice Completion Service Configuration (Optional)
COMPANY_NAME=Your Company Name
COMPANY_ALIASES=Alternative Name 1,Alternative Name 2,DBA Name
REQUIRE_ALL_FIELDS=false
COMPLETION_MAX_RETRIES=3
OCR_CONFIDENCE_MIN=0.5

# =============================================================================
# Google Cloud Configuration (Required for PDF Processing & Invoice Processing)
# =============================================================================
# Your Google Cloud Project ID (required for both OCR and Invoice processing)
GOOGLE_CLOUD_PROJECT=your-project-id
GOOGLE_PROJECT_ID=your-project-id

# Google Cloud Processing Location (required for Document AI Invoice processing)
GOOGLE_LOCATION=eu
GOOGLE_CLOUD_LOCATION=eu

# Google Cloud Authentication (Required for OCR & Invoice processing)
# Choose ONE of the following authentication methods:
# Option 1: Path to service account JSON key file
GOOGLE_APPLICATION_CREDENTIALS=/path/to/your/service-account-key.json
# Option 2: Inline JSON credentials (alternative to file path)
# GOOGLE_CREDENTIALS='{"type":"service_account","project_id":"your-project",...}'

# Google Cloud Storage Buckets (for other features)
GCS_SOURCE_BUCKET=your-source-bucket
GCS_OUTPUT_BUCKET=your-output-bucket

# Document AI Processor Configuration
# OCR Processor (Vision API - automatically configured)
# Invoice Processor (Document AI - configure these)
GOOGLE_PROCESSOR_ID=your-document-ai-processor-id
DOCUMENT_AI_PROCESSOR_ID=your-processor-id
# Optional: Specific processor version (defaults to latest)
# GOOGLE_PROCESSOR_VERSION=your-processor-version
# DOCUMENT_AI_PROCESSOR_VERSION=your-processor-version

# =============================================================================
# Google Sheets Configuration (Required for Export)
# =============================================================================
# Google Sheets URL for exporting DATEV bookings
GOOGLE_SHEET_URL=https://docs.google.com/spreadsheets/d/your-spreadsheet-id-here

# Optional: Specific worksheet name (defaults to "DATEV_Bookings")
GOOGLE_SHEET_WORKSHEET=DATEV_Bookings

# =============================================================================
# Optional: Google Cloud Storage Folder Configuration
# =============================================================================
# Optional: Folders within buckets (leave empty to use bucket root)
# GCS_SOURCE_FOLDER=invoices/
# GCS_OUTPUT_FOLDER=processed/

# =============================================================================
# Chart of Accounts Configuration (Optional)
# =============================================================================
# Specify which German standard chart of accounts to use
# Options: SKR03 (process-oriented) or SKR04 (account-type oriented)
# Default: SKR04
CHART_OF_ACCOUNTS=SKR03

# =============================================================================
# Logging Configuration (Optional)
# =============================================================================
# Log level: trace, debug, info, warn, error, fatal, panic
LOG_LEVEL=info

# Log format: console (human-readable) or json (structured)
LOG_FORMAT=console

# Log time format (Go time format)
LOG_TIME_FORMAT=2006-01-02T15:04:05Z07:00

# Log output: stdout, stderr, or file path
LOG_OUTPUT=stdout

# =============================================================================
# Setup Instructions:
# =============================================================================
# 1. Copy this file: cp .env.example .env
# 2. Fill in your actual values above
# 3. Run: go mod tidy (to ensure dependencies are installed)
# 4. Build the project: go build -o tools
# 5. Run the CLI: ./tools --help
#
# For detailed setup instructions, see the README.md file.